
#include "stdafx.h"

#include <Windows.h>
#include <stdio.h>

bool RedPillMethod() {
	/**
	The IDTR on VMs will be much higher than on a host machine.
	This function tests the IDTR against prepared checks to see if it matches values common with virtualization
	 */
	unsigned char idtr[6];
	unsigned long idt = 0;
	unsigned long idt_base = 0;

	// Store the 
	__asm sidt idtr

	idt = *((unsigned long *)&idtr[2]);
	idt_base = idt >> 24;

	//printf("IDT BASE: 0x%x\n", idt);
	//printf("Modified IDT: 0x%x\n", idt_base);

	if (idt_base > 0xd0 || idt_base == 0x5d) {
		// Might be a VM
		return TRUE;
	}
	else {
		// Might not be a VM
		return FALSE;
	}
}

bool VMWareDetect() {
	/**
	VMWare hooks into CPU port 5658h
	Specific calls to this port will return data
	Call 0xA queries the version of VMWare when a proper magic number is set in EAX
	*/
	unsigned long r_ebx = 0; // Stores the result from the port

	// Opens a CPU port to query the VMWare utils
	__asm {
		MOV EAX, 564D5868h; VMXh
		MOV EBX, 0
		MOV ECX, 0Ah; Request VMWare version
		MOV EDX, 5658h; VX
		in EAX, DX; Lowercase cuz of macros
		MOV r_ebx, EBX; EBX should be VMXh
	}

	// 0x564D5868 -> "VMXh"
	if (r_ebx == 0x564D5868)
		return TRUE;

	//printf("[-] IN PORT: 0x%x\n", r_ebx);
	return FALSE;
}


void QueryKey(HKEY hKey)
{
	const int MAX_KEY_LENGTH = 255;
	const int MAX_VALUE_NAME = 16383;

	TCHAR    achKey[MAX_KEY_LENGTH];   // buffer for subkey name
	DWORD    cbName;                   // size of name string 
	TCHAR    achClass[MAX_PATH] = TEXT("");  // buffer for class name 
	DWORD    cchClassName = MAX_PATH;  // size of class string 
	DWORD    cSubKeys = 0;               // number of subkeys 
	DWORD    cbMaxSubKey;              // longest subkey size 
	DWORD    cchMaxClass;              // longest class string 
	DWORD    cValues;              // number of values for key 
	DWORD    cchMaxValue;          // longest value name 
	DWORD    cbMaxValueData;       // longest value data 
	DWORD    cbSecurityDescriptor; // size of security descriptor 
	FILETIME ftLastWriteTime;      // last write time 

	DWORD i, retCode;

	TCHAR  achValue[MAX_VALUE_NAME];
	DWORD cchValue = MAX_VALUE_NAME;

	// Get the class name and the value count. 
	retCode = RegQueryInfoKey(
		hKey,                    // key handle 
		achClass,                // buffer for class name 
		&cchClassName,           // size of class string 
		NULL,                    // reserved 
		&cSubKeys,               // number of subkeys 
		&cbMaxSubKey,            // longest subkey size 
		&cchMaxClass,            // longest class string 
		&cValues,                // number of values for this key 
		&cchMaxValue,            // longest value name 
		&cbMaxValueData,         // longest value data 
		&cbSecurityDescriptor,   // security descriptor 
		&ftLastWriteTime);       // last write time 

								 // Enumerate the subkeys, until RegEnumKeyEx fails.

	if (cSubKeys)
	{
		printf("\nNumber of subkeys: %d\n", cSubKeys);

		for (i = 0; i < cSubKeys; i++)
		{
			cbName = MAX_KEY_LENGTH;
			retCode = RegEnumKeyEx(hKey, i,
				achKey,
				&cbName,
				NULL,
				NULL,
				NULL,
				&ftLastWriteTime);
			if (retCode == ERROR_SUCCESS)
			{
				_tprintf(TEXT("(%d) %s\n"), i + 1, achKey);
				HKEY hSubKey = 0;
				retCode = RegOpenKeyEx(
					hKey,
					achKey,
					NULL,
					NULL,
					&hSubKey);
				if (retCode == ERROR_SUCCESS) {
					QueryKey(hSubKey);
				}
				else {
					printf("Open key failed\n");
				}
				RegCloseKey(hSubKey);
			}
			
			

		}
	}

	// Enumerate the key values. 

	if (cValues)
	{
		printf("\nNumber of values: %d\n", cValues);

		for (i = 0, retCode = ERROR_SUCCESS; i < cValues; i++)
		{
			cchValue = MAX_VALUE_NAME;
			achValue[0] = '\0';
			retCode = RegEnumValue(hKey, i,
				achValue,
				&cchValue,
				NULL,
				NULL,
				NULL,
				NULL);

			if (retCode == ERROR_SUCCESS)
			{
				_tprintf(TEXT("(%d) %s\n"), i + 1, achValue);
			}
		}
	}
}


bool RegSearchForValue(HKEY hKeyRoot, LPTSTR lpSubKey, LPTSTR lpQueryValue, DWORD dwRegType) {
	LONG lResult;		// Error value
	PVOID pvData;		// Value of key
	LPDWORD pcbData;	// Length of the data

	// First check if we can retrieve the value we want
	lResult = RegGetValue(
		hKeyRoot,			// Root key to query
		lpSubKey,			// Subkey the value is in
		lpQueryValue,		// Value name to query
		dwRegType,			// Type of the registry key to search for
		NULL,				// Type already provided, no need to verify later
		pvData,				// Key value stored here
		pcbData);			// Length of the data

	if (lResult != ERROR_SUCCESS) {
		return FALSE;
	}
	return FALSE;
}


bool SearchRegistryForVM() {
	HKEY hTestKey;

	if (RegOpenKeyEx(HKEY_LOCAL_MACHINE,
		TEXT("SYSTEM\\CurrentControlSet\\Control\\DeviceClasses"),
		0,
		KEY_READ,
		&hTestKey) == ERROR_SUCCESS
		)
	{
		QueryKey(hTestKey);
	}

	RegCloseKey(hTestKey);

	return false;
}

bool inAVirtualMachine() {
	bool redPillMethod = RedPillMethod();
	bool VMWareMethod = VMWareDetect();

	// Return aggregate of detection methods
	return redPillMethod | VMWareMethod;
}